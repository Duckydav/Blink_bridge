"""
Test blinkpy avec gestion 2FA interactive
"""

import asyncio
try:
    from blinkpy.blinkpy import Blink
    from blinkpy.auth import Auth
    import json

    async def test_blink_with_2fa():
        print("=== Test connexion Blink avec 2FA ===\n")

        # Configuration
        blink = Blink()

        # Credentials
        auth = Auth({
            "username": "d.davidfrancois@gmail.com",
            "password": "CuN8lOH6Sudk_Iin"
        })

        blink.auth = auth

        print("Tentative de connexion...")
        print("‚ö†Ô∏è Un code 2FA sera demand√© si activ√©")

        try:
            # Connexion avec gestion 2FA
            await blink.start()

            print("‚úÖ Connexion r√©ussie!")
            print(f"R√©seaux trouv√©s: {len(blink.networks)}")

            if not blink.networks:
                print("‚ùå Aucun r√©seau trouv√©")
                return

            # Afficher les informations d√©taill√©es
            for network_name, network in blink.networks.items():
                print(f"\nüì° R√©seau: {network_name}")
                print(f"   - ID: {network.network_id}")
                print(f"   - Statut: {'Arm√©' if network.arm else 'D√©sarm√©'}")

                # Sync modules
                print(f"   üîÑ Sync Modules ({len(network.sync_modules)}):")
                for sync_name, sync in network.sync_modules.items():
                    print(f"      - {sync_name} (ID: {sync.sync_id})")
                    print(f"        Status: {sync.status}")

                    # Lister tous les attributs pour debug
                    attrs = [attr for attr in dir(sync) if not attr.startswith('_') and not callable(getattr(sync, attr, None))]
                    print(f"        Attributs: {attrs}")

                # Cam√©ras
                print(f"   üìπ Cam√©ras ({len(network.cameras)}):")
                for camera_name, camera in network.cameras.items():
                    print(f"      - {camera_name} (ID: {camera.camera_id})")
                    print(f"        Status: {camera.status}")

                    if hasattr(camera, 'battery'):
                        print(f"        Batterie: {camera.battery}")

            # üéØ TEST CRUCIAL : Acc√®s stockage local
            print("\nüíæ üéØ TEST STOCKAGE LOCAL USB:")
            for network_name, network in blink.networks.items():
                for sync_name, sync in network.sync_modules.items():
                    print(f"\n   Test pour Sync Module: {sync_name}")

                    # V√©rifier local storage
                    if hasattr(sync, 'local_storage'):
                        print(f"      ‚úÖ Attribut local_storage trouv√©: {sync.local_storage}")

                    # Essayer les m√©thodes de manifeste
                    methods = ['get_local_storage_manifest', 'local_storage_manifest', 'get_manifest']

                    for method in methods:
                        if hasattr(sync, method):
                            try:
                                print(f"      Tentative {method}...")
                                func = getattr(sync, method)

                                if asyncio.iscoroutinefunction(func):
                                    result = await func()
                                else:
                                    result = func()

                                print(f"      ‚úÖ {method} r√©ussi!")
                                print(f"         Type: {type(result)}")
                                print(f"         Contenu: {result}")

                                if isinstance(result, dict) and 'clips' in result:
                                    clips = result['clips']
                                    print(f"         üé¨ {len(clips)} clips USB trouv√©s!")

                                    for i, clip in enumerate(clips[:3]):
                                        print(f"            Clip {i+1}: {clip.get('name', 'unknown')}")
                                        print(f"               Size: {clip.get('size', 'unknown')}")
                                        print(f"               Date: {clip.get('created_at', 'unknown')}")

                                break

                            except Exception as e:
                                print(f"      ‚ùå {method}: {e}")

            print("\nüéØ R√âSULTAT: Connexion Blink √©tablie avec succ√®s!")
            print("   - API fonctionnelle")
            print("   - Sync modules d√©tect√©s")
            print("   - Pr√™t pour acc√®s USB si disponible")

        except Exception as e:
            print(f"‚ùå Erreur de connexion: {e}")
            import traceback
            traceback.print_exc()

        finally:
            # Fermer proprement
            try:
                await blink.auth.session.close()
            except:
                pass

    if __name__ == "__main__":
        print("üöÄ Test Blink_bridge avec 2FA...\n")

        print("üí° Instructions:")
        print("   1. Lancez ce script")
        print("   2. Entrez le code 2FA re√ßu par email quand demand√©")
        print("   3. Observez les informations de vos devices")

        asyncio.run(test_blink_with_2fa())

except ImportError as e:
    print(f"‚ùå Erreur d'importation: {e}")
    print("Installation: pip install blinkpy aiohttp")